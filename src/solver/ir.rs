//! The Datalog Intermediate Representation (IR).
//!
//! This module defines the core data structures used by the planner and the
//! bottom-up engine, representing rules, literals, and terms in a way that is
//! decoupled from the top-down solver's `StatementTmpl` format.

use crate::middleware::{Predicate, Value, Wildcard};

/// A term in a Datalog literal, which can be a constant value or a variable (wildcard).
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum Term {
    Constant(Value),
    Variable(Wildcard),
}

/// Identifies a predicate in the Datalog IR. This includes user-defined
/// custom predicates, built-in native predicates, and planner-generated
/// magic predicates.
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum PredicateIdentifier {
    /// A standard predicate (native or custom).
    Normal(Predicate),
    GetValue,
    /// A "magic" predicate generated by the planner.
    /// The string is the name of the original predicate, and the `Vec<usize>`
    /// indicates which argument positions are bound in the adornment.
    Magic {
        name: String,
        bound_indices: Vec<usize>,
    },
}

/// A single literal (or atom) in a Datalog rule, like `P(x, y)`.
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Literal {
    pub predicate: PredicateIdentifier,
    pub terms: Vec<Term>,
}

/// A Datalog rule, consisting of a head and a body. `head :- body`.
#[derive(Debug, Clone)]
pub struct Rule {
    pub head: Literal,
    pub body: Vec<Literal>,
}

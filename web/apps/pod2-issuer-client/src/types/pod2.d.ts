/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type StatementArg =
  | {
      Literal: Value;
    }
  | {
      Key: AnchoredKey;
    };
export type Value =
  | {
      Set: Value[];
    }
  | {
      Dictionary: {
        [k: string]: Value;
      };
    }
  | {
      Int: string;
    }
  | {
      Raw: MiddlewareValue;
    }
  | string
  | boolean
  | Value[];
export type MiddlewareValue = string;
export type Hash = string;
export type Predicate =
  | {
      type: "Native";
      value: NativePredicate;
    }
  | {
      type: "BatchSelf";
      value: number;
    }
  | {
      type: "Custom";
      value: CustomPredicateRef;
    };
export type NativePredicate =
  | "None"
  | "ValueOf"
  | "Equal"
  | "NotEqual"
  | "Gt"
  | "Lt"
  | "SumOf"
  | "ProductOf"
  | "MaxOf"
  | "DictContains"
  | "DictNotContains"
  | "SetContains"
  | "SetNotContains"
  | "ArrayContains";
export type StatementTmplArg =
  | {
      type: "None";
    }
  | {
      type: "Literal";
      value: Value;
    }
  | {
      type: "Key";
      /**
       * @minItems 2
       * @maxItems 2
       */
      value: [KeyPartOrWildcard, KeyPartOrWildcard];
    };
/**
 * Represents a key or resolved wildcard
 */
export type KeyPartOrWildcard =
  | {
      type: "Key";
      value: string;
    }
  | {
      type: "Origin";
      value: Origin;
    }
  | {
      type: "Wildcard";
      value: IndexedWildcard;
    };

export interface SchemaContainer {
  mainpod: MainPod;
  signedpod: SignedPod;
}
export interface MainPod {
  pod_class: string;
  pod_type: string;
  proof: string;
  public_statements: Statement[];
}
export interface Statement {
  args: StatementArg[];
  predicate: Predicate;
}
export interface AnchoredKey {
  key: string;
  origin: Origin;
}
export interface Origin {
  pod_id: Hash;
}
export interface CustomPredicateRef {
  batch: CustomPredicateBatch;
  index: number;
}
export interface CustomPredicateBatch {
  name: string;
  predicates: CustomPredicate[];
}
export interface CustomPredicate {
  /**
   * true for "and", false for "or"
   */
  conjunction: boolean;
  name: string;
  private_args: string[];
  public_args: string[];
  statements: StatementTmpl[];
}
export interface StatementTmpl {
  args: StatementTmplArg[];
  pred: Predicate;
}
/**
 * Represents a wildcard identified by its index in the argument list
 */
export interface IndexedWildcard {
  index: number;
  wildcard: string;
}
export interface SignedPod {
  entries: {
    [k: string]: Value;
  };
  pod_class: string;
  pod_type: string;
  proof: string;
}
